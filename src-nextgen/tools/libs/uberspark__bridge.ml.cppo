(*===========================================================================*)
(*===========================================================================*)
(*	uberSpark bridge module interface implementation		 *)
(*	author: amit vasudevan (amitvasudevan@acm.org)							 *)
(*===========================================================================*)
(*===========================================================================*)

open Unix
open Yojson


(*---------------------------------------------------------------------------*)
(*---------------------------------------------------------------------------*)
(* type definitions *)
(*---------------------------------------------------------------------------*)
(*---------------------------------------------------------------------------*)




(*---------------------------------------------------------------------------*)
(*---------------------------------------------------------------------------*)
(* general submodules *)
(*---------------------------------------------------------------------------*)
(*---------------------------------------------------------------------------*)


module Container =
struct
#include "uberspark__bridge_container.ml"
end

module Native =
struct
#include "uberspark__bridge_native.ml"
end


(*---------------------------------------------------------------------------*)
(*---------------------------------------------------------------------------*)
(* interface definitions *)
(*---------------------------------------------------------------------------*)
(*---------------------------------------------------------------------------*)


let dump
	(bridge_ns_path : string)
	?(bridge_exectype = "container")
	(output_directory : string)
	=
	let src_bridge_json_filename = (Uberspark.Namespace.get_namespace_root_dir_prefix ()) ^ "/" ^ Uberspark.Namespace.namespace_root ^ "/" ^ bridge_ns_path ^ "/" ^
			Uberspark.Namespace.namespace_root_mf_filename in
	let dst_json_filename = output_directory ^ "/" ^ Uberspark.Namespace.namespace_root_mf_filename in
	let src_bridge_container_filename = (Uberspark.Namespace.get_namespace_root_dir_prefix ())  ^ "/" ^ Uberspark.Namespace.namespace_root ^ "/" ^ bridge_ns_path ^ 
			"/" ^ Uberspark.Namespace.namespace_bridge_container_filename in
	let dst_container_filename = output_directory ^ "/" ^ Uberspark.Namespace.namespace_bridge_container_filename in
	
	(* copy json file *)
	Uberspark.Osservices.file_copy src_bridge_json_filename dst_json_filename;

	(* if container, then dump container file as well *)
	if(bridge_exectype = "container") then
		Uberspark.Osservices.file_copy src_bridge_container_filename dst_container_filename;
	;

	()
;;


let remove
	(bridge_ns_path : string)
	=
	let full_bridge_ns_path = (Uberspark.Namespace.get_namespace_root_dir_prefix ())  ^ "/" ^ Uberspark.Namespace.namespace_root ^ "/" ^ bridge_ns_path in
	
	(* remove the path and files within *)
	Uberspark.Osservices.rmdir_recurse [ full_bridge_ns_path ];
	()
;;

let bridge_parameter_to_string
	?(separator = " ")
	?(prefix = "")
	(input_list : string list)
	: string =
	let bridge_parameter_string = ref "" in

	List.iter (fun input_element -> 
		bridge_parameter_string := !bridge_parameter_string ^ separator ^ prefix ^ input_element;
	) input_list;

	(!bridge_parameter_string)
;;




(*---------------------------------------------------------------------------*)
(*---------------------------------------------------------------------------*)
(* class definitions *)
(*---------------------------------------------------------------------------*)
(*---------------------------------------------------------------------------*)


class bridge_object 
	= object(self)


	(* uberspark-manifest json node variable *)	
	val json_node_uberspark_manifest_var: Uberspark.Manifest.uberspark_manifest_var_t = Uberspark.Manifest.uberspark_manifest_var_default_value () ;


	(* uberspark-bridge-as json node variable *)	
	val json_node_uberspark_bridge_var: Uberspark.Manifest.Bridge.json_node_uberspark_bridge_t = 
		Uberspark.Manifest.Bridge.json_node_uberspark_bridge_var_default_value ();
	
	method get_json_node_uberspark_bridge_var 
		: Uberspark.Manifest.Bridge.json_node_uberspark_bridge_t =
		(json_node_uberspark_bridge_var)
	;


	method load_from_json
		(mf_json : Yojson.Basic.json)
		: bool =

		let retval = ref false in

		let rval_json_node_uberspark_bridge_var = Uberspark.Manifest.Bridge.json_node_uberspark_bridge_to_var  
			mf_json json_node_uberspark_bridge_var in

		if rval_json_node_uberspark_bridge_var then begin
			retval := true;
		end else begin
			retval := false;
		end;

		(!retval)
	;

	method load_from_file 
		(json_file : string)
		: bool =
		let retval = ref false in
		Uberspark.Logger.log ~lvl:Uberspark.Logger.Debug "loading bridge settings from file: %s" json_file;

		let (rval, mf_json) = Uberspark.Manifest.manifest_file_to_uberspark_manifest_var json_file json_node_uberspark_manifest_var in

			if rval then begin
					retval := self#load_from_json mf_json; 
			end	else begin
					retval := false;
			end;

		(!retval)
	;



	method load 
		(bridge_ns : string)
		: bool =
		let l_retval = ref true in
		let bridge_ns_json_path = (Uberspark.Namespace.get_namespace_root_dir_prefix ()) ^ "/" ^ 
			bridge_ns ^ "/" ^
			Uberspark.Namespace.namespace_root_mf_filename in
			
			if (Str.string_match (Str.regexp_string (Uberspark.Namespace.namespace_root ^ "/" ^ Uberspark.Namespace.namespace_bridge ^ "/")) bridge_ns 0) then begin
				l_retval := self#load_from_file bridge_ns_json_path;
			end else begin
				json_node_uberspark_bridge_var.namespace <- bridge_ns;
				json_node_uberspark_bridge_var.category <- "native";
			end;

		(!l_retval)
	;


	(*method store_to_file 
		(json_file : string)
		: bool =
		Uberspark.Logger.log ~lvl:Uberspark.Logger.Debug "storing bridge settings to file: %s" json_file;

		Uberspark.Manifest.write_to_file json_file 
			[
				(Uberspark.Manifest.json_node_uberspark_manifest_var_to_jsonstr json_node_uberspark_manifest_var);
				(Uberspark.Manifest.Bridge.json_node_uberspark_bridge_var_to_jsonstr json_node_uberspark_bridge_var);
			];

		(true)
	;*)


	(*method store 
		()
		: bool =
		let retval = ref false in 
		let bridge_ns = json_node_uberspark_bridge_var.namespace in
		let bridge_ns_json_path = (Uberspark.Namespace.get_namespace_root_dir_prefix ()) ^ "/" ^ bridge_ns in
		let bridge_ns_json_filename = bridge_ns_json_path ^ "/" ^ Uberspark.Namespace.namespace_root_mf_filename in

		(* make the namespace directory *)
		Uberspark.Osservices.mkdir ~parent:true bridge_ns_json_path (`Octal 0o0777);

		retval := self#store_to_file bridge_ns_json_filename;

		(* check if bridge type is container, if so store dockerfile *)
		if !retval && json_node_uberspark_bridge_var.category = "container" then
			begin
				let input_bridge_dockerfile = json_node_uberspark_bridge_var.container_build_filename in 
				let output_bridge_dockerfile = bridge_ns_json_path ^ "/uberspark-bridge.Dockerfile" in 
					Uberspark.Osservices.file_copy input_bridge_dockerfile output_bridge_dockerfile;
			end
		;

		(!retval)
	;*)


	method build 
		()
		: bool =

		let retval = ref false in

		if json_node_uberspark_bridge_var.category = "container" then
			begin
				let bridge_ns = json_node_uberspark_bridge_var.namespace in
				let bridge_container_path = (Uberspark.Namespace.get_namespace_root_dir_prefix ()) ^ "/" ^ bridge_ns in

				Uberspark.Logger.log "building bridge: %s" bridge_ns;

				if (Container.build_image bridge_container_path bridge_ns) == 0 then begin	
					retval := true;
				end else begin
					Uberspark.Logger.log ~lvl:Uberspark.Logger.Error "could not build bridge!"; 
					retval := false;
				end
				;
											
			end
		else
			begin
				Uberspark.Logger.log ~lvl:Uberspark.Logger.Warn "ignoring build command for 'native' bridge";
				retval := true;
			end
		;

		(!retval)
	;







	method invoke 
		?(context_path_builddir = ".")
		(p_bridge_cmd : string list)
		(bridge_parameters_assoc_list : (string * string) list)
		: bool =

		let retval = ref false in
		let d_cmd = ref "" in
		
		(* construct command line using bridge_cmd variable from bridge definition *)
		for li = 0 to (List.length p_bridge_cmd) - 1 do begin
			let b_cmd = ref "" in
			
			b_cmd := List.nth p_bridge_cmd li;

			(* iterate through bridge parameter list and substitute values *)
			List.iter (fun ( (bridge_parameter_name:string), (bridge_parameter_value:string) )  ->
				b_cmd :=  Str.global_replace (Str.regexp bridge_parameter_name) 
					bridge_parameter_value !b_cmd;
			)bridge_parameters_assoc_list;

			if li == 0 then begin
				d_cmd := !b_cmd;
			end else begin
				d_cmd := !d_cmd ^ " && " ^ !b_cmd;
			end;

		end done;

		
		Uberspark.Logger.log ~lvl:Uberspark.Logger.Debug "d_cmd=%s" !d_cmd;

		(* construct bridge namespace *)
		let bridge_ns = json_node_uberspark_bridge_var.namespace in

		(* invoke the compiler *)
		if json_node_uberspark_bridge_var.category = "container" then begin
			
			if ( (Container.run_image ~context_path_builddir:context_path_builddir "." !d_cmd bridge_ns) == 0 ) then begin
				retval := true;
			end else begin
				retval := false;
			end;
		end else begin
			if ( (Native.run_shell_command  ~context_path_builddir:context_path_builddir "." bridge_ns bridge_ns) == 0 ) then begin
				retval := true;
			end else begin
				retval := false;
			end;
		end;

		(!retval)
	;



end;;



(*---------------------------------------------------------------------------*)
(*---------------------------------------------------------------------------*)







(*---------------------------------------------------------------------------*)
(*---------------------------------------------------------------------------*)
(* interface definitions *)
(*---------------------------------------------------------------------------*)
(*---------------------------------------------------------------------------*)



